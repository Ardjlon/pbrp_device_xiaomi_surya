name: Build TWRP

on:
  workflow_dispatch:
    inputs:
      MANIFEST_TYPE:
        description: 'MANIFEST_TYPE'
        required: true
        default: 'twrp'
        type: choice
        options:
        - twrp
        - omni
      MANIFEST_URL:
        description: 'MANIFEST_URL'
        required: true
        default: 'https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp.git'
      MANIFEST_BRANCH:
        description: 'MANIFEST_BRANCH'
        required: true
        default: 'twrp-11'
        type: choice
        options:
        - twrp-11
        - twrp-12.1
      DEVICE_TREE_URL:
        description: 'DEVICE_TREE_URL'
        required: true
        default: 'https://github.com/brigudav/android_device_xiaomi_surya_twrp'
      DEVICE_TREE_BRANCH:
        description: 'DEVICE_TREE_BRANCH'
        required: true
        default: 'android-11'
      DEVICE_PATH:
        description: 'DEVICE_PATH'
        required: true
        default: 'device/xiaomi/surya'
      DEVICE_NAME:
        description: 'DEVICE_NAME'
        required: true
        default: 'surya'
      DEVICE_TYPE:
        description: 'DEVICE_TYPE'
        required: true
        default: 'recovery'
        type: choice
        options:
        - recovery
        - boot
        - vendorboot
      UPLOAD:
        description: 'Upload to Telegram (true or false)'
        required: true
        default: 'yes'
        type: choice
        options:
        - yes
        - no
      PUBLISH:
        description: 'Publish to GitHub (true or false)'
        required: true
        default: 'yes'
        type: choice
        options:
        - yes
        - no

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-18.04

    steps:
    - name: Send notification to Telegram
      if: github.event.inputs.UPLOAD == 'true'
      run: |
        curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage -d text="<b>- Run build recovery for </b><i>${{ github.event.inputs.DEVICE_NAME }}</i>%0A<b>- Start Time: </b><i>$(TZ=Australia/Sydney date +"%Y-%m-%d"-%H:%M:%S)</i>" -d chat_id=${{ secrets.TELEGRAM_TO }} -d parse_mode=HTML

    - name: Check Out
      uses: actions/checkout@main

    - name: Prepare the environment
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d
        sudo apt -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo apt -y autoremove --purge
        sudo apt -y autoclean
        sudo apt clean
        sudo apt update
        sudo apt -y upgrade
        sudo apt -y install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev tree lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc unzip jq bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev imagemagick libbz2-dev libssl-dev lzma ncftp bash-completion python openjdk-8-jdk qemu-user-static

    - name: Set Swap Space
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Install repo
      run: |
        mkdir ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        export PATH=~/bin:$PATH

    - name: Initialize repo
      run: |
        PATH=~/bin:$PATH
        mkdir workspace
        cd workspace
        echo "::set-output name=pwd::$(pwd)"
        git config --global user.name "brigudav"
        git config --global user.email "alexvl1972@hotmail.com"
        repo init --depth=1 -u ${{ github.event.inputs.MANIFEST_URL }} -b ${{ github.event.inputs.MANIFEST_BRANCH }}
      id: pwd

    - name: Repo Sync
      run: |
        PATH=~/bin:$PATH
        cd workspace
        repo sync -j$(nproc --all) -c --no-clone-bundle --no-tags
        rm -rf .repo

    - name: Clone device tree
      run: |
        PATH=~/bin:$PATH
        cd ${{ steps.pwd.outputs.pwd }}
        git clone ${{ github.event.inputs.DEVICE_TREE_URL }} -b ${{ github.event.inputs.DEVICE_TREE_BRANCH }} ./${{ github.event.inputs.DEVICE_PATH }}

    - name: Building recovery
      run: |
        PATH=~/bin:$PATH
        cd ${{ steps.pwd.outputs.pwd }}
        export ALLOW_MISSING_DEPENDENCIES=true
        source build/envsetup.sh
        lunch ${{ github.event.inputs.MANIFEST_TYPE }}_${{ github.event.inputs.DEVICE_NAME }}-eng
        make clean
        make ${{ github.event.inputs.DEVICE_TYPE }}image -j$(nproc --all)

    - name: Set variables
      run: |
        echo "::set-output name=date::$(date +%F)"
        echo "::set-output name=Outdir::"${{ steps.pwd.outputs.pwd }}/out/target/product/${{ github.event.inputs.DEVICE_NAME }}""
      id: var

    - name: Add img to zip
      run: |
        cd ${{steps.var.outputs.Outdir}}
        zip -9 twrp-${{ github.event.inputs.DEVICE_NAME }}-${{ steps.var.outputs.date }}.zip ${{ github.event.inputs.DEVICE_TYPE }}.img
        echo "::set-output name=name::$(find * -name *.zip -type f)"
      id: zipname

    - name: Upload recovery to Telegram
      if: github.event.inputs.UPLOAD == 'true'
      run: |
        curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage -d text="<b>- Build for </b><i>${{ github.event.inputs.DEVICE_NAME }}</i> <b>completed%0A- End Time: </b><i>$(TZ=Australia/Sydney date +"%Y-%m-%d"-%H:%M:%S)</i>" -d chat_id=${{ secrets.TELEGRAM_TO }} -d parse_mode=HTML
        ZIP=${{steps.var.outputs.Outdir}}/${{ steps.zipname.outputs.name }}
        curl https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument \
          -X POST \
          -F chat_id="${{ secrets.TELEGRAM_TO }}" \
          -F document="@$ZIP" \
          --silent --show-error --fail >/dev/null &

    - name: Publish to GitHub
      if: github.event.inputs.PUBLISH == 'true'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{steps.var.outputs.Outdir}}/${{ steps.zipname.outputs.name }}
        name: ${{ steps.zipname.outputs.name }}-${{ github.run_id }}
        tag_name: ${{ github.run_id }}
        body: Recovery for ${{ github.event.inputs.DEVICE_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.TEST }}
